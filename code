import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
import pickle

# Load the dataset
ipl_df = pd.read_csv('ipl_data.csv')

# Exploratory Data Analysis
# First 5 Columns Data
print(ipl_df.head())

# Describing the ipl_dfset
print(ipl_df.describe())

# Information about Each Column
print(ipl_df.info())

# Number of Unique Values in each column
print(ipl_df.nunique())

# ipl_df types of all Columns
print(ipl_df.dtypes)

# Wickets Distribution
sns.displot(ipl_df['wickets'], kde=False, bins=10)
plt.title("Wickets Distribution")
plt.show()

# Runs Distribution
sns.displot(ipl_df['total'], kde=False, bins=10)
plt.title("Runs Distribution")
plt.show()

# Data Cleaning
# Removing Irrelevant Data columns
irrelevant = ['mid', 'date', 'venue', 'batsman', 'bowler', 'striker', 'non-striker']
print(f'Before Removing Irrelevant Columns : {ipl_df.shape}')
ipl_df = ipl_df.drop(irrelevant, axis=1)  # Drop Irrelevant Columns
print(f'After Removing Irrelevant Columns : {ipl_df.shape}')
print(ipl_df.head())

# Keeping only Consistent Teams
const_teams = ['Kolkata Knight Riders', 'Chennai Super Kings', 'Rajasthan Royals',
               'Mumbai Indians', 'Kings XI Punjab', 'Royal Challengers Bangalore',
               'Delhi Daredevils', 'Sunrisers Hyderabad']
print(f'Before Removing Inconsistent Teams : {ipl_df.shape}')
ipl_df = ipl_df[(ipl_df['bat_team'].isin(const_teams)) & (ipl_df['bowl_team'].isin(const_teams))]
print(f'After Removing Inconsistent Teams : {ipl_df.shape}')
print(f"Consistent Teams : \n{ipl_df['bat_team'].unique()}")
print(ipl_df.head())

# Remove First 5 Overs of every match
print(f'Before Removing Overs : {ipl_df.shape}')
ipl_df = ipl_df[ipl_df['overs'] >= 5.0]
print(f'After Removing Overs : {ipl_df.shape}')
print(ipl_df.head())

# Plotting a Correlation Matrix of current data
numeric_cols = ipl_df.select_dtypes(include='number')
sns.heatmap(data=numeric_cols.corr(), annot=True)
plt.show()

# Data Preprocessing and Encoding
# Performing Label Encoding
le = LabelEncoder()
for col in ['bat_team', 'bowl_team']:
    ipl_df[col] = le.fit_transform(ipl_df[col])

# Performing One Hot Encoding and Column Transformation
columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [0, 1])], remainder='passthrough')
ipl_df = np.array(columnTransformer.fit_transform(ipl_df))
cols = ['batting_team_Chennai Super Kings', 'batting_team_Delhi Daredevils', 'batting_team_Kings XI Punjab',
        'batting_team_Kolkata Knight Riders', 'batting_team_Mumbai Indians', 'batting_team_Rajasthan Royals',
        'batting_team_Royal Challengers Bangalore', 'batting_team_Sunrisers Hyderabad',
        'bowling_team_Chennai Super Kings', 'bowling_team_Delhi Daredevils', 'bowling_team_Kings XI Punjab',
        'bowling_team_Kolkata Knight Riders', 'bowling_team_Mumbai Indians', 'bowling_team_Rajasthan Royals',
        'bowling_team_Royal Challengers Bangalore', 'bowling_team_Sunrisers Hyderabad', 'runs', 'wickets', 'overs',
        'runs_last_5', 'wickets_last_5', 'total']
df = pd.DataFrame(ipl_df, columns=cols)

# Model Building
# Prepare Train and Test Data
features = df.drop(['total'], axis=1)
labels = df['total']
train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size=0.20, shuffle=True)
print(f"Training Set : {train_features.shape}\nTesting Set : {test_features.shape}")

# Random Forest Regression
forest = RandomForestRegressor()
forest.fit(train_features, train_labels)
train_score_forest = str(forest.score(train_features, train_labels) * 100)
test_score_forest = str(forest.score(test_features, test_labels) * 100)
print(f'Train Score : {train_score_forest[:5]}%\nTest Score : {test_score_forest[:5]}%')

print("---- Random Forest Regression - Model Evaluation ----")
print("Mean Absolute Error (MAE): {}".format(mean_absolute_error(test_labels, forest.predict(test_features))))
print("Mean Squared Error (MSE): {}".format(mean_squared_error(test_labels, forest.predict(test_features))))
print("Root Mean Squared Error (RMSE): {}".format(np.sqrt(mean_squared_error(test_labels, forest.predict(test_features)))))

# Export Model
filename = "ml_model.pkl"
pickle.dump(forest, open(filename, "wb"))
